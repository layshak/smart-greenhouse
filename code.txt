#include <Wire.h>
#include <Adafruit_TSL2561_U.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

// --- НАСТРОЙКИ ---
// Укажите данные вашей Wi-Fi сети
const char* ssid = "Galaxy A25 5G 747A";
const char* password = "12121212";

// Укажите токен вашего бота и ваш Chat ID
#define BOT_TOKEN "7931280012:AAF3nKFP2JMF0KkpswHimA-EZKh2HgffzUU"
#define CHAT_ID "5291140379"

// --- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ---
WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// --- НАСТРОЙКИ ДАТЧИКА ВЛАЖНОСТИ ---
const int soilMoisturePin = A0;
const int SOIL_MOISTURE_THRESHOLD = 300;

// --- НАСТРОЙКИ ДЛЯ СВЕТА ---
// vvv ИСПРАВЛЕНИЕ 1: Заменяем D5 на номер GPIO vvv
const int lightControlPin = 14; // Пин для управления светом (GPIO14)
// ^^^ КОНЕЦ ИСПРАВЛЕНИЯ 1 ^^^
const float LIGHT_THRESHOLD = 30.0; // Порог освещённости в люксах
bool lightOn = false; // Состояние света

// Переменные для контроля времени
unsigned long lastCheckTime = 0;
const long checkInterval = 30000; // Интервал проверки (1 минута)
bool notificationSent = false; // Флаг, чтобы не спамить Telegram

// Датчик освещенности
Adafruit_TSL2561_Unified tsl = Adafruit_TSL2561_Unified(TSL2561_ADDR_FLOAT, 12345);

// --- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ---
void displaySensorDetails(void) {
  sensor_t sensor;
  tsl.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print("Датчик:           "); Serial.println(sensor.name);
  Serial.println("------------------------------------");
  delay(500);
}

void configureSensor(void) {
  tsl.enableAutoRange(true);
  tsl.setIntegrationTime(TSL2561_INTEGRATIONTIME_13MS);
  Serial.println("------------------------------------");
  Serial.print("Усиление:         "); Serial.println("Auto");
  Serial.print("Время интеграции: "); Serial.println("13 ms");
  Serial.println("------------------------------------");
}

void ensureWiFiConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nПотеряно соединение с Wi-Fi. Попытка переподключения...");
    WiFi.begin(ssid, password);
    int retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < 20) {
      delay(500);
      Serial.print(".");
      retries++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWi-Fi переподключен!");
    } else {
      Serial.println("\nНе удалось переподключиться к Wi-Fi. Перезагрузка через 10 секунд...");
      delay(10000);
      ESP.restart();
    }
  }
}

// --- SETUP ---
void setup(void) {
  Serial.begin(9600);
  Serial.println("\n\nЗапуск устройства...");

  // Инициализация датчика освещенности
  if (!tsl.begin()) {
    Serial.println("Датчик TSL2561 не найден!");
    while (1) { delay(1000); }
  }
  displaySensorDetails();
  configureSensor();

  pinMode(soilMoisturePin, INPUT);
  pinMode(lightControlPin, OUTPUT);
  digitalWrite(lightControlPin, LOW); // Выключаем свет на старте

  // Подключение к Wi-Fi
  Serial.print("Подключение к Wi-Fi: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi подключен!");
  Serial.print("IP адрес: ");
  Serial.println(WiFi.localIP());

  delay(1000);
  client.setInsecure();

  Serial.println("Попытка установить связь с Telegram ботом...");
  // vvv ИСПРАВЛЕНИЕ 2: Упрощаем проверку связи с ботом vvv
  if (bot.getMe()) {
    Serial.println("Связь с ботом установлена успешно!");
  } else {
    Serial.println("Не удалось установить связь с ботом.");
  }
  // ^^^ КОНЕЦ ИСПРАВЛЕНИЯ 2 ^^^

  Serial.println("\nУстройство готово к работе!");
  Serial.println("Порог влажности (raw): " + String(SOIL_MOISTURE_THRESHOLD));
  Serial.println("");
}

// --- LOOP ---
void loop(void) {
  ensureWiFiConnection();

  unsigned long currentMillis = millis();
  if (currentMillis - lastCheckTime >= checkInterval) {
    lastCheckTime = currentMillis;

    // --- Чтение влажности ---
    int soilValue = analogRead(soilMoisturePin);
    Serial.print("Текущее значение влажности (raw): ");
    Serial.println(soilValue);

    if (soilValue > SOIL_MOISTURE_THRESHOLD) {
      if (!notificationSent) {
        String message = "Внимание! Почва слишком сухая.\nЗначение: " + String(soilValue) +
                         "\nПорог: " + String(SOIL_MOISTURE_THRESHOLD);
        bot.sendMessage(CHAT_ID, message, "");
        Serial.println("ОТПРАВЛЕНО УВЕДОМЛЕНИЕ О СУХОЙ ПОЧВЕ");
        notificationSent = true;
      }
    } else {
      if (notificationSent) {
        Serial.println("Влажность в норме, сброс флага уведомлений.");
        notificationSent = false;
      }
    }

    // --- Чтение освещенности ---
    sensors_event_t event;
    tsl.getEvent(&event);
    if (event.light) {
      Serial.print("Освещенность: ");
      Serial.print(event.light);
      Serial.println(" lux");

      // --- Управление светом ---
      if (event.light < LIGHT_THRESHOLD && !lightOn) {
        digitalWrite(lightControlPin, HIGH); // Включаем свет
        lightOn = true;
        Serial.println("Свет ВКЛЮЧЕН (низкая освещенность)");
        bot.sendMessage(CHAT_ID, "Освещенность низкая (" + String(event.light) + " lux). Свет включён.", "");
      } else if (event.light >= LIGHT_THRESHOLD && lightOn) {
        digitalWrite(lightControlPin, LOW); // Выключаем свет
        lightOn = false;
        Serial.println("Свет ВЫКЛЮЧЕН (достаточная освещенность)");
        bot.sendMessage(CHAT_ID, "Освещенность достаточная (" + String(event.light) + " lux). Свет выключен.", "");
      }

    } else {
      Serial.println("Ошибка чтения освещённости");
    }

    Serial.println("--- Конец проверки ---");
  }
}
